---
AWSTemplateFormatVersion: 2010-09-09

Description: AWS CloudFormation Stack for a Fargate Cluster and Associated Resources

Parameters: {}

Mappings: {}

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  PublicInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicInternetRouteTable

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicInternetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: 10.0.0.0/25
      VpcId: !Ref VPC

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: 10.0.0.128/25
      VpcId: !Ref VPC

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet01

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet02

  ECSServiceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  ECSCluster:
    Type: AWS::ECS::Cluster

  ECSInternetFacingLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ecs-internet-facing-load-balancer-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  ECSInternetFacingLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02
      Type: application
      SecurityGroups:
        - !Ref ECSInternetFacingLoadBalancerSecurityGroup

  ECSInternetFacingLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: "Request Not Routed"
            StatusCode: 200
      LoadBalancerArn: !Ref ECSInternetFacingLoadBalancer
      Port: 80
      Protocol: HTTP

  NginxTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC

  NginxListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ECSInternetFacingLoadBalancerListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /*
      Actions:
        - TargetGroupArn: !Ref NginxTargetGroup
          Type: forward

  NginxTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Nginx-task-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ECSInternetFacingLoadBalancerSecurityGroup
      VpcId: !Ref VPC

  NginxTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      # LogGroupName is not required
      LogGroupName: nginx-task
      RetentionInDays: 1

  NginxExecutionIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  NginxTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: nginx:latest
          # a LogConfiguration of _some_ sort is required for use with AWS ECS Fargate
          # without this, AWS does not have the ability to ship logs for a given container
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref NginxTaskLogGroup
              awslogs-region: !Ref AWS::Region
              # if awslogs-stream-prefix is not set the following error is thrown:
              # Fargate requires log configuration options to include awslogs-stream-prefix to support log driver awslogs
              awslogs-stream-prefix: Nginx
          Name: nginx
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
      # the Cpu property is required if using the Fargate launch type
      Cpu: 256
      # an ExecutionRoleArn is required if a ContainerDefinition contains a LogConfiguration that utilizes LogDriver: awslogs
      ExecutionRoleArn: !Ref NginxExecutionIAMRole
      Family: nginx
      # the Memory property is required if using the Fargate launch type
      Memory: 512
      # NetworkMode: awsvpc is required if using the Fargate launch type      
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE

  NginxService:
    Type: AWS::ECS::Service
    # to create an ECS Service you need a "DependsOn" specific services as defined on this page
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html
    DependsOn:
      - ECSInternetFacingLoadBalancer
      - NginxListenerRule
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 0
      LaunchType: FARGATE
      LoadBalancers: 
        - ContainerName: nginx
          ContainerPort: 80
          TargetGroupArn: !Ref NginxTargetGroup
      # NetworkConfiguration is required for tasks that use the
      # awsvpc network mode, which is the network mode required by Fargate
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref NginxTaskSecurityGroup
          Subnets:
            - !Ref PublicSubnet01
            - !Ref PublicSubnet02
      PlatformVersion: LATEST
      # Role: String
      ServiceName: nginx
      TaskDefinition: !Ref NginxTaskDefinition

Outputs: {}

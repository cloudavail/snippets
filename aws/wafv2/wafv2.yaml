AWSTemplateFormatVersion: '2010-09-09'

Description: Create a WAFv2 for CloudFront
  
Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: 10.0.0.0/25
      VpcId: !Ref VPC

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: 10.0.0.128/25
      VpcId: !Ref VPC

  PublicInternetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet01

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet02

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  PublicInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicInternetRouteTable

  DeniedIPSet:
    Type: AWS::WAFv2::IPSet
    Properties:
      Name: IPSet-of-IP-addresses-test
      Addresses: 
        - 208.66.25.134/32
      IPAddressVersion: IPV4
      Scope: CLOUDFRONT

  DenyByIPRuleGroup:
    Type: AWS::WAFv2::RuleGroup
    Properties:
      Name: WebACL-Rule-Group-Test
      Scope: CLOUDFRONT
      Capacity: 2
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        SampledRequestsEnabled: true
        MetricName: DenyByIPRuleGroupTest

  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      DefaultAction:
        Block: {}
      Name: !Sub ${AWS::StackName}
      Scope: CLOUDFRONT
      # VisibilityConfig is required, contrary to documentation here:
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafv2-webacl.html
      # 
      VisibilityConfig:
        CloudWatchMetricsEnabled: false
        SampledRequestsEnabled: false
        MetricName: !Sub ${AWS::StackName}


  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
          TargetOriginId: ALBLoadBalancer
          ViewerProtocolPolicy: allow-all
        Enabled: true
        Origins:
          - DomainName: !GetAtt ALBLoadBalancer.DNSName
            CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: http-only
            Id: ALBLoadBalancer
        WebACLId: arn:aws:wafv2:us-east-1:187376578462:global/webacl/waf-v2-01/a71785c8-0a7b-423d-a9e7-301fcd87f077

  PublicInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicInternetRouteTable

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  ALBLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALBLoadBalancer Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  ALBLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBLoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02
      Type: application

  ALBHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: "Accepted Request through WAF"
            StatusCode: 200
      LoadBalancerArn: !Ref ALBLoadBalancer
      Port: 80
      Protocol: HTTP

Outputs: {}

  # WebACL:
  #   Value: !Ref WebACL
# 
  # DeniedIPSet:
  #   Value: !Ref DeniedIPSet
# 
  # DenyByIPRuleGroupRef:
  #   Value: !Ref DenyByIPRuleGroup
# 
  # DenyByIPRuleGroupName:
  #   Value: !Select [ 0, !Split [ '|', !Ref DenyByIPRuleGroup ] ]
# 
  # DenyByIPRuleGroupId:
  #   Value: !Select [ 1, !Split [ '|', !Ref DenyByIPRuleGroup ] ]
